#pragma once
// 락방식을 이용한 스택.
// 안전하게 pop을 하기전 락을 잡아 다른 쓰레드의 접근을 막고
// pop을 진행하여 성공여부를 리턴.
#include <mutex>
#include <condition_variable>
#include <atomic>

using namespace std;

template<typename T>
class LockStack
{
public:
    LockStack() {}

    LockStack(const LockStack&) = delete;
    LockStack& operator=(const LockStack&) = delete;

    void Push(T value)
    {
        lock_guard<mutex> lock(_mutex);
        _stack.push(std::move(value));
        _condVar.notify_one(); // 다음대기하고있는 쓰레드가 있을경우 깨움
    }

    bool TryPop(T& value)
    {
        lock_guard<mutex> lock(_mutex);
        if (_stack.empty())
            return false;

        value = std::move(_stack.top());
        _stack.pop();
        return true;
    }

    void WaitPop(T& value)
    {
        unique_lock<mutex> lock(_mutex);
        _condVar.wait(lock, [this] {return _stack.empty() == false; });
        value = std::move(_stack.top());
        _stack.pop();
    }

private:
    stack<T> _stack;
    mutex _mutex;
    condition_variable _condVar;
};

template<typename T>
class LockFreeStack
{
    struct Node
    {
        Node(const T& value) : data(value), next(nullptr)
        {

        }

        T data;
        Node* next;
    };

public:
    // 1) 새 노드를 만들고
    // 2) 새 노드의 next = head
    // 3) head = 새 노드

    // [ ][ ][ ][ ][ ]
    // [head]
    void Push(const T& value)
    {
        Node* node = new Node(value);
        node->next = _head;

        /*if (_head == node->next) 아래 compare_exchange는 이 과정을 atomic하게 실행.
        {
            _head = node;
            return true;
        }
        else
        {
            node->next = _head;
            return false;
        }*/

        while (_head.compare_exchange_weak(node->next, node) == false)
        {
            //node->next = _head;
        }

        // 이 사이에 새치기 당하면?
        // _head = node;
        // 반복될경우 데드락은아니고 라이브락 상태가 될 수 있음.
    }

    // 1) head 읽기
    // 2) head->next 읽기
    // 3) head = head->next
    // 4) data 추출해서 반환
    // 5) 추출한 노드를 삭제

    bool TryPop(T& value)
    {
        ++_popCount;

        Node* oldHead = _head;

        /*if (_head == oldhead) 아래 compare_exchange는 이 과정을 atomic하게 실행.
        {
            _head = oldHead->next;
            return true;
        }
        else
        {
            oldHead = _head;
            return false;
        }*/

        while (oldHead && _head.compare_exchange_weak(oldHead, oldHead->next) == false)
        {
            //oldHead = _head;
        }

        if (oldHead == nullptr)
        {
            --_popCount;
            return false;
        }
        //Exception X
        value = oldHead->data;

        // 잠시 삭제 보류
        //delete oldHead;

        TryDelete(oldHead);

        return true;
    }

private:
    void TryDelete(Node* oldHead)
    {
        if (_popCount == 1)
        {
            // 나 혼자네?
            // 이왕 혼자인거 삭제 예약된 다른 데이터들도 삭제해보자

            Node* node = _pendingList.exchange(nullptr);

            if (--_popCount == 0)
            {
                // 끼어든 쓰레드가 없음 -> 삭제 진행
                // 중간에 다른쓰레드 개입여지없음. 어차피 데이터는 분리해둔 상태
                DeleteNodes(node);
            }
            else if (node)
            {
                // 누가 끼어들었으니 다시 갖다 놓기
                ChainPendingNodeList(node);
            }
            delete oldHead;
        }
        else
        {
            // 누가있네? 그럼 지금 삭제하지 않고 삭제 예약만 진행
            ChainPendingNode(oldHead);
            --_popCount;
        }
    }

    void ChainPendingNodeList(Node* first, Node* last)
    {
        last->next = _pendingList;

        while (_pendingList.compare_exchange_weak(last->next, first) == false)
        {

        }
    }

    void ChainPendingNodeList(Node* node)
    {
        Node* last = node;
        while (last->next)
            last = last->next;

        ChainPendingNodeList(node, last);
    }

    void ChainPendingNode(Node* node)
    {
        ChainPendingNodeList(node, node);
    }

    static void DeleteNodes(Node* node)
    {
        while (node)
        {
            Node* next = node->next;
            delete node;
            node = next;
        }
    }

    // [ ][ ][ ][ ][ ]
    // [head]
    atomic<Node*> _head;

    atomic<uint32_t> _popCount = 0; // pop을 실행중인 쓰레드 개수
    atomic<Node*> _pendingList; // 삭제 되어야 할 노드들 (첫번째 노드)
};
